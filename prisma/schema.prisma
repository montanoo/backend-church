generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Parishes {
  id              Int              @id @default(autoincrement())
  parishName      String
  parishLocation  String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?
  Baptisms        Baptism[]
  Confirmations   Confirmation[]
  Marriages       Marriage[]
  FirstCommunions FirstCommunion[]
  Halls           Hall[]
}

model Baptism {
  id           Int       @id @default(autoincrement())
  baptizedName String
  birthDate    DateTime
  baptismDate  DateTime
  parish       Parishes  @relation(fields: [parishId], references: [id])
  parishId     Int
  book         String
  folio        String
  birthPlace   String
  motherName   String?
  fatherName   String?
  godparents   String?
  ministerName String
  marginNotes  String?
  pastorName   String
  pastorEmail  String
  phoneNumber  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
}

model Confirmation {
  id               Int       @id @default(autoincrement())
  confirmedName    String
  confirmationDate DateTime
  parish           Parishes  @relation(fields: [parishId], references: [id])
  parishId         Int
  book             String
  folio            String
  diocese          String?
  bishopName       String
  age              Int
  motherName       String?
  fatherName       String?
  godparents       String?
  pastorName       String
  pastorEmail      String
  phoneNumber      String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime?
}

model ParishEvent {
  id            Int            @id @default(autoincrement())
  title         String
  description   String
  startDateTime DateTime
  endDateTime   DateTime
  organizer     EventOrganizer @relation(fields: [organizerId], references: [id])
  organizerId   Int
  hall          Hall           @relation(fields: [hallId], references: [id])
  hallId        Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?
}

model RecurringEvent {
  id                   Int            @id @default(autoincrement())
  recurringTitle       String
  recurringDescription String
  dayOfWeek            String // Example: "Monday", "Tuesday"
  startTime            DateTime
  endTime              DateTime
  organizer            EventOrganizer @relation(fields: [organizerId], references: [id])
  organizerId          Int
  hall                 Hall           @relation(fields: [hallId], references: [id])
  hallId               Int
  createdAt            DateTime       @default(now())
  updatedAt            DateTime?
}

model Marriage {
  id           Int       @id @default(autoincrement())
  husbandName  String
  wifeName     String
  marriageDate DateTime
  parish       Parishes  @relation(fields: [parishId], references: [id])
  parishId     Int
  diocese      String?
  delegateName String
  godparents   String?
  pastorName   String
  pastorEmail  String
  phoneNumber  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
}

model ReservationNotification {
  id               Int             @id @default(autoincrement())
  reservation      HallReservation @relation(fields: [reservationId], references: [id])
  reservationId    Int
  notificationType String
  notificationDate DateTime
  createdAt        DateTime        @default(now())
  updatedAt        DateTime?
}

model EventOrganizer {
  id              Int              @id @default(autoincrement())
  name            String
  email           String
  phoneNumber     String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?
  ParishEvents    ParishEvent[]
  RecurringEvents RecurringEvent[]
}

model FirstCommunion {
  id            Int       @id @default(autoincrement())
  communionName String
  communionDate DateTime
  parish        Parishes  @relation(fields: [parishId], references: [id])
  parishId      Int
  pastorName    String
  pastorEmail   String
  phoneNumber   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
}

model HallReservation {
  id                       Int                       @id @default(autoincrement())
  hall                     Hall                      @relation(fields: [hallId], references: [id])
  hallId                   Int
  user                     User                      @relation(fields: [userId], references: [id])
  userId                   Int
  startDateTime            DateTime
  endDateTime              DateTime
  rentalContract           String // Path to the rental contract file
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime?
  ReservationNotifications ReservationNotification[]
  FinancialTransactions    FinancialTransaction[]
}

model Hall {
  id               Int               @id @default(autoincrement())
  hallName         String
  capacity         Int?
  parish           Parishes          @relation(fields: [parishId], references: [id])
  parishId         Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?
  ParishEvents     ParishEvent[]
  RecurringEvents  RecurringEvent[]
  HallReservations HallReservation[]
}

model Token {
  id           Int       @id @default(autoincrement())
  token        String
  refreshToken String
  isActive     Boolean
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime?
}

model FinancialTransaction {
  id              Int             @id @default(autoincrement())
  transactionType String // "income" or "expense"
  amount          Decimal         @db.Decimal(10, 2)
  description     String
  transactionDate DateTime
  category        String
  reservation     HallReservation @relation(fields: [reservationId], references: [id])
  reservationId   Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime?
}

model User {
  id               Int               @id @default(autoincrement())
  username         String
  email            String
  password         String
  role             String // "administrator", "organizer", "parishioner"
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?
  HallReservations HallReservation[]
  Tokens           Token[]
}
